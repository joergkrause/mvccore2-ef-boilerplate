// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JoergIsAGeek.WebFrontEnd.ServiceProxy.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class EmployeeDto
    {
        /// <summary>
        /// Initializes a new instance of the EmployeeDto class.
        /// </summary>
        public EmployeeDto()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EmployeeDto class.
        /// </summary>
        public EmployeeDto(int id, string en = default(string), int? ri = default(int?), string n = default(string), string pn = default(string), bool? hp = default(bool?))
        {
            Id = id;
            En = en;
            Ri = ri;
            N = n;
            Pn = pn;
            Hp = hp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public int Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "en")]
        public string En { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ri")]
        public int? Ri { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "n")]
        public string N { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "pn")]
        public string Pn { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hp")]
        public bool? Hp { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (En != null)
            {
                if (En.Length > 10)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "En", 10);
                }
                if (En.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "En", 0);
                }
            }
            if (N != null)
            {
                if (N.Length > 25)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "N", 25);
                }
                if (N.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "N", 0);
                }
            }
            if (Pn != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Pn, "(\\d{1-6})-\\d{4-10}"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Pn", "(\\d{1-6})-\\d{4-10}");
                }
            }
        }
    }
}
